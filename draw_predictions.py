""" import cv2 #G√∂rsel i≈üleme g√∂revleri i√ßin (g√∂rsel okuma, yazma, √ßizim)
import supervision as sv  #Nesne tespiti sonu√ßlarƒ± (kutular, etiketler) i√ßin
from inference_sdk import InferenceHTTPClient
import os
import sys
import numpy as np

# --- Roboflow API Ayarlarƒ± ---
CLIENT = InferenceHTTPClient(
    api_url="https://serverless.roboflow.com",
    api_key="1nP8NxJMP9QsCHjudTOy"
)
MODEL_ID = "personal-protective-equipment-combined-model/8"

if len(sys.argv) != 3:
    print("Kullanƒ±m: python draw_predictions.py <giri≈ü_yolu> <√ßƒ±kƒ±≈ü_yolu>", file=sys.stderr)
    sys.exit(1)

# Komut satƒ±rƒ± arg√ºmanlarƒ±ndan giri≈ü ve √ßƒ±kƒ±≈ü g√∂rsel yollarƒ±nƒ± alƒ±r
input_image_path = sys.argv[1]
output_image_path = sys.argv[2]


# Giri≈ü g√∂rsel dosyasƒ±nƒ±n ger√ßekten var olup olmadƒ±ƒüƒ±nƒ± kontrol eder
if not os.path.exists(input_image_path):
    print(f"HATA: Giri≈ü g√∂rseli bulunamadƒ±: {input_image_path}", file=sys.stderr)
    sys.exit(1)

image = cv2.imread(input_image_path)
if image is None:
    print(f"HATA: G√∂rsel y√ºklenemedi: {input_image_path}", file=sys.stderr)
    sys.exit(1)

# --- Roboflow API ile Tahminleri Alma ---
try:
    raw_predictions = CLIENT.infer(input_image_path, model_id=MODEL_ID)
    preds = raw_predictions.get("predictions", [])

    if ("error" in raw_predictions or "message" in raw_predictions) and not preds:
        print(f"HATA: Roboflow API hatasƒ±: {raw_predictions.get('error', raw_predictions.get('message', 'Bilinmeyen hata'))}", file=sys.stderr)
        sys.exit(1)
except Exception as e:
    print(f"HATA: Roboflow API hatasƒ±: {e}", file=sys.stderr)
    sys.exit(1)


# Tespit edilen her bir KKD t√ºr√ºn√ºn sayƒ±sƒ±nƒ± tutan s√∂zl√ºk 
ppe_counts = {
    "hardhat": 0,
    "safety vest": 0,
    "goggles": 0,
    "mask": 0
}



# --- Tespit Sonu√ßlarƒ±nƒ± Supervision K√ºt√ºphanesi Formatƒ±na Hazƒ±rlama ---
# Sƒ±nƒ±rlayƒ±cƒ± kutu koordinatlarƒ±nƒ± (x1, y1, x2, y2) saklamak i√ßin liste

xyxy = []
# G√ºvenilirlik skorlarƒ±nƒ± saklamak i√ßin liste
conf = []
# Sƒ±nƒ±f kimliklerini (id) saklamak i√ßin liste
class_ids = []
# Sƒ±nƒ±f isimlerini saklamak i√ßin liste (Supervision k√ºt√ºphanesi i√ßin)
sv_class_names = []
# Roboflow'dan gelen t√ºm sƒ±nƒ±f isimlerini alƒ±r, tekrar edenleri kaldƒ±rƒ±r ve alfabetik sƒ±ralar
all_model_class_names = sorted(list(set([p["class"] for p in preds])))
# Sƒ±nƒ±f isimlerini sayƒ±sal kimliklere e≈üleyen bir s√∂zl√ºk olu≈üturur
class_name_to_id = {name: i for i, name in enumerate(all_model_class_names)}
# Supervision i√ßin sƒ±nƒ±f isimlerini atar
sv_class_names = all_model_class_names

# Her bir tahmini (prediction) d√∂ng√ºye alƒ±r
for p in preds:
    x, y = p["x"], p["y"]
    w, h = p["width"], p["height"]
    x1, y1 = x - w / 2, y - h / 2
    x2, y2 = x + w / 2, y + h / 2
    xyxy.append([x1, y1, x2, y2])
    conf.append(p["confidence"])
    class_name = p["class"]
    
    if class_name.lower() == "person":
        person_count += 1

 # Roboflow modelinden gelebilecek farklƒ± isimlendirmeleri standartla≈ütƒ±rƒ±r
    norm_name = class_name.lower().replace(" ", "")
    if norm_name == "safetyvest":
        norm_name = "safety vest"
    elif norm_name == "hardhat":
        norm_name = "hardhat"

    if norm_name in ppe_counts:
        ppe_counts[norm_name] += 1

    class_ids.append(class_name_to_id.get(class_name, -1))
    # üí• Tahmin yoksa (bo≈üsa) hata vermeden g√ºvenli √ßƒ±k
if len(xyxy) == 0:
    print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
    for ppe_type in ppe_counts:
        display_name = ppe_type.replace('_', ' ').title()
        print(f"{display_name}: 0")
    
    # Bo≈ü g√∂rseli aynen kaydet
    cv2.imwrite(output_image_path, image)
    print("‚ö†Ô∏è Hi√ßbir nesne tespit edilmedi. Bo≈ü g√∂rsel kaydedildi.")
    sys.exit(0)


# --- Supervision Detections Nesnesini Olu≈üturma ---
detections = sv.Detections(
    xyxy=np.array(xyxy, dtype=float),
    confidence=np.array(conf, dtype=float),
    class_id=np.array(class_ids, dtype=int),
)
detections.class_name = sv_class_names
# --- Kutulayƒ±cƒ± ve Etiketleyici Annotator'larƒ± Tanƒ±mlama ---
# Sƒ±nƒ±rlayƒ±cƒ± kutularƒ± √ßizmek i√ßin BoxAnnotator nesnesi olu≈üturur
box_annotator = sv.BoxAnnotator(thickness=2)
label_annotator = sv.LabelAnnotator(
    text_thickness=2,
    text_scale=0.8,
    text_color=sv.Color.WHITE
)
# Orijinal g√∂rselin bir kopyasƒ±nƒ± alƒ±r (√ºzerine √ßizim yapmak i√ßin)
annotated_image = image.copy()

# --- Tahminleri G√∂rsel √úzerine √áizme ---
for i in range(len(detections)):
    class_id = detections.class_id[i]
    class_name = detections.class_name[class_id]
    confidence = detections.confidence[i]
    box = detections.xyxy[i]

    display_label = f"{class_name.replace('_', ' ').title()}: {confidence:.2f}"

    single_detection = sv.Detections(
        xyxy=box.reshape(1, -1),
        class_id=np.array([class_id]),
        confidence=np.array([confidence]),
    )

    annotated_image = box_annotator.annotate(
        scene=annotated_image,
        detections=single_detection
    )

    annotated_image = label_annotator.annotate(
        scene=annotated_image,
        detections=single_detection,
        labels=[display_label]
    )

  
# ƒ∞≈ülenmi≈ü (kutulu ve etiketli) g√∂rseli belirtilen √ßƒ±kƒ±≈ü yoluna kaydeder
cv2.imwrite(output_image_path, annotated_image)
# Sonu√ßlarƒ± JSON olarak d√∂nd√ºr
print(json.dumps({
    "output_image_path": output_image_path,
    "ppe_counts": ppe_counts
}))

# --- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ±nƒ± C# tarafƒ±nƒ±n okuyabileceƒüi formatta yazdƒ±r ---
print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
for ppe_type, count in ppe_counts.items():
    display_name = ppe_type.replace('_', ' ').title() # √ñrneƒüin "hardhat" -> "Hardhat"
    print(f"{display_name}: {count}")








# Toplam ki≈üi sayƒ±sƒ±nƒ± hesapla (basit toplama)
toplam_kisi = sum(ppe_counts.values())
print(f"toplamkisi: {toplam_kisi}")









toplam_kisi = sum(ppe_counts.values())
print(f"Toplam Ki≈üi: {toplam_kisi}")


print(f"‚úÖ Kutulu g√∂rsel kaydedildi ‚Üí {output_image_path}")






    """
""" 
import cv2
import supervision as sv
from inference_sdk import InferenceHTTPClient
import os
import sys
import numpy as np
import json  # ‚úÖ JSON √ßƒ±ktƒ±sƒ± i√ßin eklendi

# --- Roboflow API Ayarlarƒ± ---
CLIENT = InferenceHTTPClient(
    api_url="https://serverless.roboflow.com",
    api_key="1nP8NxJMP9QsCHjudTOy"
)
MODEL_ID = "personal-protective-equipment-combined-model/8"

if len(sys.argv) != 3:
    print("Kullanƒ±m: python draw_predictions.py <giri≈ü_yolu> <√ßƒ±kƒ±≈ü_yolu>", file=sys.stderr)
    sys.exit(1)

input_image_path = sys.argv[1]
output_image_path = sys.argv[2]

if not os.path.exists(input_image_path):
    print(f"HATA: Giri≈ü g√∂rseli bulunamadƒ±: {input_image_path}", file=sys.stderr)
    sys.exit(1)

image = cv2.imread(input_image_path)
if image is None:
    print(f"HATA: G√∂rsel y√ºklenemedi: {input_image_path}", file=sys.stderr)
    sys.exit(1)

try:
    raw_predictions = CLIENT.infer(input_image_path, model_id=MODEL_ID)
    preds = raw_predictions.get("predictions", [])

    if ("error" in raw_predictions or "message" in raw_predictions) and not preds:
        print(f"HATA: Roboflow API hatasƒ±: {raw_predictions.get('error', raw_predictions.get('message', 'Bilinmeyen hata'))}", file=sys.stderr)
        sys.exit(1)
except Exception as e:
    print(f"HATA: Roboflow API hatasƒ±: {e}", file=sys.stderr)
    sys.exit(1)

ppe_counts = {
    "hardhat": 0,
    "safety vest": 0,
    "goggles": 0,
    "mask": 0
}

xyxy = []
conf = []
class_ids = []
sv_class_names = []
all_model_class_names = sorted(list(set([p["class"] for p in preds])))
class_name_to_id = {name: i for i, name in enumerate(all_model_class_names)}
sv_class_names = all_model_class_names

person_count = 0  # ‚úÖ EKSƒ∞K OLAN DEƒûƒ∞≈ûKEN EKLENDƒ∞

for p in preds:
    x, y = p["x"], p["y"]
    w, h = p["width"], p["height"]
    x1, y1 = x - w / 2, y - h / 2
    x2, y2 = x + w / 2, y + h / 2
    xyxy.append([x1, y1, x2, y2])
    conf.append(p["confidence"])
    class_name = p["class"]

    if class_name.lower() == "person":
        person_count += 1  # ‚úÖ DOƒûRU YERE EKLENDƒ∞

    norm_name = class_name.lower().replace(" ", "")
    if norm_name == "safetyvest":
        norm_name = "safety vest"
    elif norm_name == "hardhat":
        norm_name = "hardhat"

    if norm_name in ppe_counts:
        ppe_counts[norm_name] += 1

    class_ids.append(class_name_to_id.get(class_name, -1))

if len(xyxy) == 0:
    print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
    for ppe_type in ppe_counts:
        display_name = ppe_type.replace('_', ' ').title()
        print(f"{display_name}: 0")
    
    cv2.imwrite(output_image_path, image)
    print("‚ö†Ô∏è Hi√ßbir nesne tespit edilmedi. Bo≈ü g√∂rsel kaydedildi.")
    sys.exit(0)

detections = sv.Detections(
    xyxy=np.array(xyxy, dtype=float),
    confidence=np.array(conf, dtype=float),
    class_id=np.array(class_ids, dtype=int),
)
detections.class_name = sv_class_names

box_annotator = sv.BoxAnnotator(thickness=2)
label_annotator = sv.LabelAnnotator(
    text_thickness=2,
    text_scale=0.8,
    text_color=sv.Color.WHITE
)

annotated_image = image.copy()

for i in range(len(detections)):
    class_id = detections.class_id[i]
    class_name = detections.class_name[class_id]
    confidence = detections.confidence[i]
    box = detections.xyxy[i]

    display_label = f"{class_name.replace('_', ' ').title()}: {confidence:.2f}"

    single_detection = sv.Detections(
        xyxy=box.reshape(1, -1),
        class_id=np.array([class_id]),
        confidence=np.array([confidence]),
    )

    annotated_image = box_annotator.annotate(
        scene=annotated_image,
        detections=single_detection
    )

    annotated_image = label_annotator.annotate(
        scene=annotated_image,
        detections=single_detection,
        labels=[display_label]
    )

cv2.imwrite(output_image_path, annotated_image)

print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
for ppe_type, count in ppe_counts.items():
    display_name = ppe_type.replace('_', ' ').title()
    print(f"{display_name}: {count}")

# ‚úÖ TOPLAM Kƒ∞≈ûƒ∞ ARTIK "person" sƒ±nƒ±fƒ±ndan hesaplanƒ±yor
print(f"Toplam Ki≈üi: {person_count}")

# ‚úÖ C# backend i√ßin JSON √ßƒ±ktƒ± da ekleniyor
print(json.dumps({
    "output_image_path": output_image_path,
    "ppe_counts": ppe_counts,
    "total_person_count": person_count
}))
print(f"‚úÖ Kutulu g√∂rsel kaydedildi ‚Üí {output_image_path}")


 """

import cv2 
import supervision as sv  
from inference_sdk import InferenceHTTPClient
import os
import sys
import numpy as np
import json  # JSON √ßƒ±ktƒ±sƒ± i√ßin eklendi

# --- Roboflow API Ayarlarƒ± ---
CLIENT = InferenceHTTPClient(
    api_url="https://serverless.roboflow.com",
    api_key="1nP8NxJMP9QsCHjudTOy"
)
MODEL_ID = "personal-protective-equipment-combined-model/8"

if len(sys.argv) != 3:
    print("Kullanƒ±m: python draw_predictions.py <giri≈ü_yolu> <√ßƒ±kƒ±≈ü_yolu>", file=sys.stderr)
    sys.exit(1)

input_image_path = sys.argv[1]
output_image_path = sys.argv[2]

if not os.path.exists(input_image_path):
    print(f"HATA: Giri≈ü g√∂rseli bulunamadƒ±: {input_image_path}", file=sys.stderr)
    sys.exit(1)

image = cv2.imread(input_image_path)
if image is None:
    print(f"HATA: G√∂rsel y√ºklenemedi: {input_image_path}", file=sys.stderr)
    sys.exit(1)

# --- Roboflow API ile Tahminleri Alma ---
try:
    raw_predictions = CLIENT.infer(input_image_path, model_id=MODEL_ID)
    preds = raw_predictions.get("predictions", [])

    if ("error" in raw_predictions or "message" in raw_predictions) and not preds:
        print(f"HATA: Roboflow API hatasƒ±: {raw_predictions.get('error', raw_predictions.get('message', 'Bilinmeyen hata'))}", file=sys.stderr)
        sys.exit(1)
except Exception as e:
    print(f"HATA: Roboflow API hatasƒ±: {e}", file=sys.stderr)
    sys.exit(1)

# Tespit edilen her bir KKD t√ºr√ºn√ºn sayƒ±sƒ±nƒ± tutan s√∂zl√ºk
# üéâ "person" sƒ±nƒ±fƒ±nƒ± buraya ekleyerek t√ºm sayƒ±mlarƒ± tek bir s√∂zl√ºkte topluyoruz.
ppe_counts = {
    "hardhat": 0,
    "safety vest": 0,
    "goggles": 0,
    "mask": 0,
    "person": 0 # üéâ Ki≈üi sayƒ±mƒ± i√ßin ba≈ülangƒ±√ß deƒüeri eklendi
}

# --- Tespit Sonu√ßlarƒ±nƒ± Supervision K√ºt√ºphanesi Formatƒ±na Hazƒ±rlama ---
xyxy = []
conf = []
class_ids = []
sv_class_names = []

all_model_class_names = sorted(list(set([p["class"] for p in preds])))
class_name_to_id = {name: i for i, name in enumerate(all_model_class_names)}
sv_class_names = all_model_class_names

# Her bir tahmini (prediction) d√∂ng√ºye alƒ±r
for p in preds:
    x, y = p["x"], p["y"]
    w, h = p["width"], p["height"]
    x1, y1 = x - w / 2, y - h / 2
    x2, y2 = x + w / 2, y + h / 2
    xyxy.append([x1, y1, x2, y2])
    conf.append(p["confidence"])
    class_name = p["class"]
    
    # üéâ norm_name'i her p i√ßin hesapla ve doƒürudan ppe_counts'a ekle
    norm_name = class_name.lower().replace(" ", "")
    if norm_name == "safetyvest":
        norm_name = "safety vest"
    elif norm_name == "hardhat":
        norm_name = "hardhat"
    # Eƒüer modeliniz 'person' sƒ±nƒ±fƒ±nƒ± d√∂nd√ºr√ºyorsa, bu da otomatik olarak ppe_counts'a eklenecek.
    # Bu y√ºzden ayrƒ± bir 'person_count' deƒüi≈ükenine artƒ±k gerek kalmadƒ±, hepsi ppe_counts i√ßinde.

    if norm_name in ppe_counts: # Eƒüer normalize edilmi≈ü isim ppe_counts'ta varsa
        ppe_counts[norm_name] += 1 # Sayƒ±sƒ±nƒ± artƒ±r
    else:
        # üéâ ppe_counts'ta olmayan yeni bir sƒ±nƒ±f tespit edilirse de ekle (opsiyonel ama iyi bir pratik)
        ppe_counts[norm_name] = 1 
        # Yeni sƒ±nƒ±f i√ßin bir ID atamasƒ±nƒ± da g√ºncelle (opsiyonel ama tutarlƒ±lƒ±k i√ßin)
        if norm_name not in class_name_to_id:
            class_name_to_id[norm_name] = len(all_model_class_names) # Yeni ID
            all_model_class_names.append(norm_name) # Yeni sƒ±nƒ±f adƒ±nƒ± listeye ekle
            sv_class_names = all_model_class_names # sv_class_names'ƒ± g√ºncelle

    class_ids.append(class_name_to_id.get(class_name, -1))

# üí• Tahmin yoksa (bo≈üsa) hata vermeden g√ºvenli √ßƒ±k
if len(xyxy) == 0:
    print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
    # üéâ T√ºm PPE ve ki≈üi sayƒ±mlarƒ±nƒ± 0 olarak yazdƒ±r
    for ppe_type, count in ppe_counts.items():
        display_name = ppe_type.replace('_', ' ').title()
        print(f"{display_name}: 0")
    
    # Bo≈ü g√∂rseli aynen kaydet
    cv2.imwrite(output_image_path, image)
    print("‚ö†Ô∏è Hi√ßbir nesne tespit edilmedi. Bo≈ü g√∂rsel kaydedildi.")
    # üéâ JSON √ßƒ±ktƒ±sƒ±nƒ± da bo≈ü olarak d√∂nd√ºr√ºyoruz
    print(json.dumps({
        "output_image_path": output_image_path,
        "ppe_counts": ppe_counts, # Bo≈ü sayƒ±mlar ile
        "total_person_count": 0 # Ki≈üi sayƒ±sƒ± 0
    }))
    sys.exit(0)


# --- Supervision Detections Nesnesini Olu≈üturma ---
detections = sv.Detections(
    xyxy=np.array(xyxy, dtype=float),
    confidence=np.array(conf, dtype=float),
    class_id=np.array(class_ids, dtype=int),
)
detections.class_name = sv_class_names

# --- Kutulayƒ±cƒ± ve Etiketleyici Annotator'larƒ± Tanƒ±mlama ---
box_annotator = sv.BoxAnnotator(thickness=2)
label_annotator = sv.LabelAnnotator(
    text_thickness=2,
    text_scale=0.8,
    text_color=sv.Color.WHITE
)

annotated_image = image.copy()

# --- Tahminleri G√∂rsel √úzerine √áizme ---
for i in range(len(detections)):
    class_id = detections.class_id[i]
    class_name = detections.class_name[class_id]
    confidence = detections.confidence[i]
    box = detections.xyxy[i]

    display_label = f"{class_name.replace('_', ' ').title()}: {confidence:.2f}"

    single_detection = sv.Detections(
        xyxy=box.reshape(1, -1),
        class_id=np.array([class_id]),
        confidence=np.array([confidence]),
    )

    annotated_image = box_annotator.annotate(
        scene=annotated_image,
        detections=single_detection
    )

    annotated_image = label_annotator.annotate(
        scene=annotated_image,
        detections=single_detection,
        labels=[display_label]
    )

# ƒ∞≈ülenmi≈ü (kutulu ve etiketli) g√∂rseli belirtilen √ßƒ±kƒ±≈ü yoluna kaydeder
cv2.imwrite(output_image_path, annotated_image)

# --- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ±nƒ± C# tarafƒ±nƒ±n okuyabileceƒüi formatta yazdƒ±r ---
print("\n--- KKE ve Ki≈üi Sayƒ±m Sonu√ßlarƒ± ---")
for ppe_type, count in ppe_counts.items():
    display_name = ppe_type.replace('_', ' ').title()
    print(f"{display_name}: {count}")

# üéâ Toplam ki≈üi sayƒ±sƒ±nƒ± doƒürudan ppe_counts'tan alƒ±yoruz
# Eƒüer 'person' sƒ±nƒ±fƒ± tespit edilmediyse 0 olacaktƒ±r
total_person_count = ppe_counts.get("person", 0) 
print(f"Toplam Ki≈üi: {total_person_count}") # Python √ßƒ±ktƒ±sƒ±nda g√∂r√ºnecek

# üéâ C# backend i√ßin JSON √ßƒ±ktƒ±, t√ºm bilgileri i√ßeriyor
print(json.dumps({
    "output_image_path": output_image_path,
    "ppe_counts": ppe_counts, # T√ºm KKD ve ki≈üi sayƒ±mlarƒ±nƒ± i√ßerir
    "total_person_count": total_person_count # Toplam ki≈üi sayƒ±sƒ±nƒ± da ayrƒ±ca ekledik
}))

print(f"‚úÖ Kutulu g√∂rsel kaydedildi ‚Üí {output_image_path}")